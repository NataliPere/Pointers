#include <iostream>
#include <cstdlib>
#include <ctime>

void my_swap(int num1, int num2) {
	int tmp = num1;
	num1 = num2;
	num2 = tmp;
}

void pswap(int *pn1, int *pn2) {
	int tmp = *pn1;
	*pn1 = *pn2;
	*pn2 = tmp;
}

template <typename T>
void sum_arr(T* arr, const int length, T* var) {
	*var = 0;
	for (int i = 0; i < length; i++)
		*var += *(arr + i);
}
//Заполнение случайными числами из диапазона от begin до end
template <typename T>
void fill_arr(T arr, const int length, int begin, int end) {
	srand(time(NULL));
	for (int i = 0; i < length; i++)
		arr[i] = rand() % (end - begin) + begin;
}

//Вывод массива в консоль
template <typename T>
void show_arr(T arr, const int length) {
	std::cout << '[';
	for (int i = 0; i < length; i++)
		std::cout << arr[i] << ", ";
	std::cout << "\b\b]\n";
}



int main() {
	setlocale(LC_ALL, "Russian");
	int n = 10;
	int m = 20;

	

	// Указатели на переменные
	/*std::cout << "Адрес n = " << &n << "\n"; //вывод адреса переменной, & - амперсант
	int* pn; //p - point, объявление указателя на тип int. * ставится только при объявлении переменной
	pn = &n; //направляем указатель на адрес переменной n
	//int *pn = &n; //альтернатива

	std::cout << "Адрес n = " << pn << "\n"; //вывод значения указателя pn
	std::cout << "n = " << n << "\n"; //вывод значения переменной n
	std::cout << "n = " << *pn << "\n"; //вывод значения n с помощью разыменования указателя pn

	//Разыменование- операция применяемая к указателям, с целью обращения к переменной,
	//адрес которой записан в указателе

	*pn = 15; //меняем значение n с помощью разыменования указателя pn
	std::cout << "Новая n = " << n << "\n";


	std::cout << "Адрес m = " << &m << "\n";
	pn = &m; // перенаправляем указатель на адрес переменной m
	std::cout << "Адрес m = " << pn << "\n";
	
	int* pm = &m;

	//Объём памяти выделяемый под хранение указателя зависит от разрядности операционной системы,
	//если ОС 32 разрядная, то указатель весит 4 байта. Если 64 разрядная, то указатель весит 8 байт.*/


	//Указатели и массивы

	/*const int size = 5;
	//             0   1   2   3   4 
	int arr[size]{10, 20, 30, 40, 50};
	int* pa2 = &arr[2];
	std::cout << "arr[2] = " << *pa2 << "\n"; //30
	pa2++;
	std::cout << "pa2 = " << *pa2 << "\n"; //40

	//Арифметика указателей - сдвиг направления указателей на определённое кол-во ячеек вперед или назад.
	//Для этого применяются операции сложения и вычитания. Остальные операции применять нельзя.

	pa2 -= 2; // минус 2 значения = 8 байт

	std::cout << "pa2 = " << *pa2 << "\n"; //20
	
	
	//Вывод всего массива
	//Название массива - это указатель на адрес первого элемента массива
	
	
	pa2 = &arr[0]; //pa2 = arr; Направляем указатель pa2 на адрес первого элемента массива arr
	std::cout << "pa2 = " << *pa2 << "\n"; //10
	
	
	//Вывод массива через указатель
	std::cout << "Массив: \n";
	for (int i = 0; i < size; i++)
		std::cout << *(pa2 + i) << ' '; // можно *(arr + i) = arr[i]
	std::cout << "\n";*/

	//Указатели и функции
	/*std::cout << n << ' ' << m << "\n"; //10 20
	//my_swap(n, m); // не работает так как параметры это копии
	pswap(&n, &m); // работает так как передаются адреса переменных
	
	std::cout << n << ' ' << m << "\n"; //20 10


	//Области применения указателей
	//1. Работа с массивами;
	//2. Доступ к разным объектам из разных программных блоков;
	//3. Работа с динамической памятью;
	//4. Экономия памяти.*/

	//Задача 1. Сумма элементов массива, записанных в переменную
	std::cout << "Задача 1.\nИзначальный массив:";
	const int size1 = 5;
	int arr1[size1];
	fill_arr(arr1, size1, 1, 11);
	show_arr(arr1, size1);
	sum_arr(arr1, size1, &n);
	std::cout << "Сумма элементов массива = " << n << "\n";

	

	return 0;
}